const { createClient } = require('@supabase/supabase-js');
const OpenAI = require('openai');

// Configuraci√≥n
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

console.log('ü§ñ SCRIPT GENERATOR INICIADO');

// Funci√≥n RAG para buscar en la base de datos
async function consultarRAG(consulta) {
  try {
    console.log(`üîç [RAG] Buscando informaci√≥n para: "${consulta}"`);
    
    const palabrasClave = consulta.toLowerCase()
      .replace(/[^\w√°√©√≠√≥√∫√±√º\s]/g, '')
      .split(' ')
      .filter(palabra => palabra.length > 2)
      .filter(palabra => !['que', 'del', 'las', 'los', 'una', 'sobre', 'para', 'con', 'por', 'dame', 'dime', 'noticias'].includes(palabra));

    console.log(`üîé [RAG] Palabras clave: [${palabrasClave.join(', ')}]`);

    if (palabrasClave.length === 0) {
      console.log('‚ö†Ô∏è [RAG] No se encontraron palabras clave v√°lidas');
      return [];
    }

    let documentosEncontrados = [];

    for (const palabra of palabrasClave.slice(0, 3)) {
      const { data, error } = await supabase
        .from('documents')
        .select('content, metadata')
        .or(`content.ilike.%${palabra}%,metadata->>title.ilike.%${palabra}%`)
        .limit(5);

      if (!error && data && data.length > 0) {
        documentosEncontrados.push(...data);
        console.log(`üìÑ [RAG] Encontrados ${data.length} docs para "${palabra}"`);
      }
    }

    // Eliminar duplicados
    const documentosUnicos = documentosEncontrados.filter((doc, index, self) => 
      index === self.findIndex(d => d.content === doc.content)
    ).slice(0, 5);

    console.log(`‚úÖ [RAG] Total: ${documentosUnicos.length} documentos √∫nicos encontrados`);

    if (documentosUnicos.length > 0) {
      const mejorDoc = documentosUnicos[0];
      console.log(`üèÜ [RAG] Mejor match: "${mejorDoc.metadata?.title}" (${mejorDoc.metadata?.pais})`);
    }

    return documentosUnicos;

  } catch (error) {
    console.error('‚ùå [RAG] Error:', error.message);
    return [];
  }
}

// Funci√≥n para generar script con IA REAL + RAG
async function generarScript(consulta, sessionId) {
  try {
    console.log(`ü§ñ [${sessionId}] Iniciando generaci√≥n con IA + RAG`);

    // PASO 1: Consultar RAG
    const documentos = await consultarRAG(consulta);
    
    if (documentos.length === 0) {
      console.log(`‚ùå [${sessionId}] No hay documentos en RAG`);
      return {
        script: "Lo siento, actualmente no contamos con esta informaci√≥n en nuestra base de conocimientos deportivos. ¬øHay alguna otra noticia deportiva sobre la que pueda informarte?",
        encontrado: false,
        palabras: 0
      };
    }

    // PASO 2: Preparar contexto para IA
    const contextoRAG = documentos.map((doc, index) => {
      const metadata = doc.metadata || {};
      return `DOCUMENTO ${index + 1}:
T√çTULO: ${metadata.title || 'Sin t√≠tulo'}
PA√çS: ${metadata.pais || 'Sin pa√≠s'}
FECHA: ${metadata.pubDate || 'Sin fecha'}
CONTENIDO: ${doc.content}
---`;
    }).join('\n\n');

    // PASO 3: Prompt optimizado (m√°s corto para ahorrar tokens)
    const promptOptimizado = `Eres presentadora deportiva. Crea script de 50-55 palabras EXACTAS para s√≠ntesis de voz.

ESTRUCTURA OBLIGATORIA (75-80 palabras total):
üé£ HOOK (0-3 segundos): 15-20 palabras
Impacto inmediato con exclamaci√≥n
‚úì Menciona protagonista principal
‚úì Genera expectativa m√°xima
‚úì Usa palabras de alto impacto: ¬°INCRE√çBLE!, ¬°BOMBAZO!, ¬°HIST√ìRICO!
üì∞ CORE (3-16 segundos): 45-55 palabras
‚úì Historia completa en narrativa fluida y cronol√≥gica
‚úì Detalles espec√≠ficos OBLIGATORIOS: marcadores exactos, tiempos precisos, equipos completos
‚úì Palabras simples pero din√°micas
‚úì JAM√ÅS omitir informaci√≥n clave de la base de datos
üí¨ CTA (16-20 segundos): 10-15 palabras
‚úì Pregunta directa que invite al engagement
‚úì Emoji tem√°tico relacionado
‚úì Tono conversacional y amigable
üî• EJEMPLOS MEJORADOS:
EJEMPLO 1 - Gol Espectacular (Enfoque Latino):
"¬°INCRE√çBLE! El colombiano D√≠az acaba de anotar el gol m√°s espectacular del a√±o"
"El cafetero sorprendi√≥ con un tiro libre desde 35 metros directo al √°ngulo superior en Anfield. Este golazo empata para Liverpool y mantiene vivas las esperanzas de la hinchada latina en Europa."
"¬øEl mejor gol de un colombiano en Europa? Comenta tu opini√≥n"

EJEMPLO 2 - Fichaje Latino:
"¬°BOMBAZO! El crack argentino √Ålvarez ficha por el Manchester City"
"El delantero de River firm√≥ por cinco a√±os tras pagar 20 millones. El pibe se une a su compatriota Messi como referente albiceleste en Europa. Guardiola confirm√≥ que ser√° titular desde enero."
"¬øSer√° el pr√≥ximo crack argentino en triunfar? Danos tu predicci√≥n"

REGLAS CR√çTICAS - CUMPLIMIENTO 100%:

VERIFICACI√ìN OBLIGATORIA: Antes de responder, SIEMPRE consultar "basededatos" - CERO excepciones
CONTEO EXACTO: Contar palabras manualmente - objetivo 75-80 palabras m√°ximo
TIMING ESTRICTO: M√°ximo 20 segundos = 4 palabras por segundo promedio
FIDELIDAD ABSOLUTA: Solo datos de la base - PROHIBIDO inventar o asumir
ESTRUCTURA R√çGIDA: Hook + Core + CTA - sin variaciones
COMPLETITUD: Incluir TODOS los detalles importantes de la noticia original

CONSULTA: ${consulta}

DATOS DISPONIBLES:
${contextoRAG.substring(0, 1500)}

RESPONDE SOLO EL SCRIPT:`;

    // PASO 4: Llamar a OpenAI
    console.log(`ü§ñ [${sessionId}] Enviando a GPT-4...`);
    
    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: 'Eres presentadora de noticias deportivas. Genera scripts de 75-80 palabras exactas.'
        },
        {
          role: 'user',
          content: promptOptimizado
        }
      ],
      max_tokens: 200,
      temperature: 0.7
    });

    const script = response.choices[0].message.content.trim();
    const palabras = script.split(' ').length;
    
    console.log(`‚úÖ [${sessionId}] Script generado: ${palabras} palabras`);
    console.log(`üìù [${sessionId}] Preview: "${script.substring(0, 100)}..."`);

    return {
      script: script,
      encontrado: true,
      palabras: palabras,
      documentos: documentos.length,
      fuentes: documentos.map(doc => ({
        titulo: doc.metadata?.title,
        pais: doc.metadata?.pais
      }))
    };

  } catch (error) {
    console.error(`‚ùå [${sessionId}] Error IA:`, error.message);
    
    // Fallback a script b√°sico
    return {
      script: `¬°INCRE√çBLE! √öltimas noticias sobre ${consulta}. Los equipos est√°n realizando movimientos estrat√©gicos que mantienen a toda la hinchada expectante. Esta informaci√≥n promete marcar un antes y despu√©s en la temporada actual. ¬øQu√© opinas de estos desarrollos? ‚öΩ`,
      encontrado: false,
      palabras: 48,
      error: error.message
    };
  }
}

// Exportar funciones
module.exports = {
  generarScript,
  consultarRAG
};